<?php


namespace Drupal\persistent_fields\Plugin\Field\FieldWidget;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

const DOI_RESOURCE_TYPE = [
  'Book', 'BookChapter', 'Collection', 'ComputationalNotebook', 'ConferencePaper', 'ConferenceProceeding',
  'DataPaper', 'Dataset', 'Dissertation', 'Event', 'Image', 'InteractiveResource', 'Journal', 'JournalArticle',
  'Model', 'OutputManagementPlan', 'PeerReview', 'PhysicalObject', 'Preprint', 'Report', 'Service', 'Software',
  'Sound', 'Standard', 'Text', 'Workflow', 'Other'
];

/**
 * Plugin implementation of the 'sample_field_widget' widget.
 *
 * @FieldWidget(
 *   id = "doi_field_widget",
 *   module = "persistent_fields",
 *   label = @Translation("DOI Persistent ID Widget"),
 *   field_types = {
 *     "persistent_fields_doi_field"
 *   }
 * )
 */
class DOIFieldWidget extends AbstractFieldWidget
{
  public function getFieldLabelPrefix(): string
  {
    return 'DOI ';
  }

  public function getProvisionCallback()
  {
    return "persistent_fields_ajax_doi_mint";
  }

  public function validate($element, FormStateInterface $form_state)
  {
    $value = $element['#value'];
    if (strlen($value) === 0) {
      $form_state->setValueForElement($element, '');
      return;
    }
  }

  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state)
  {
    $element = parent::formElement($items, $delta, $element, $form, $form_state); // TODO: Change the autogenerated stub

//    $element['persistent_item']['#ajax'] = [
//      'callback' => $this->getProvisionCallback(),
//      'wrapper' => $element['#attributes']['id']
//    ];

    $element['persistent_item_root'] = array(
      '#title' => $this->t('Root DOI'),
      '#type' => $this->getSetting('showRoot') ? 'textfield' : 'hidden',
      '#default_value' => isset($items[$delta]->persistent_item_root) ? $items[$delta]->persistent_item_root : NULL,
      "#attributes" => [
        "disabled" => $element['persistent_item']['#attributes']['disabled']
      ]
    );
    $element['persistent_item_parent'] = array(
      '#title' => $this->t('Parent DOI'),
      '#type' => $this->getSetting('showParent') ? 'textfield' : 'hidden',
      '#default_value' => isset($items[$delta]->persistent_item_parent) ? $items[$delta]->persistent_item_parent : NULL,
      "#attributes" => [
        "disabled" => $element['persistent_item']['#attributes']['disabled']
      ]
    );

    return $element;
  }

  public static function defaultSettings()
  {
    return array_merge(
      [
        'showRoot' => FALSE,
        'showParent' => FALSE,
      ],
      parent::defaultSettings());
  }

  public function settingsSummary()
  {
    $summary = [];

    if ($this->getSetting('showRoot')) {
      $summary[] = 'Show: root ';
    } else {
      $summary[] = 'Hide: root ';
    }

    if ($this->getSetting('showParent')) {
      $summary[] = 'Show: parent ';
    } else {
      $summary[] = 'Hide: parent ';
    }

    return $summary;
  }

  public function settingsForm(array $form, FormStateInterface $form_state)
  {
    $form['showRoot'] = [
      '#title' => $this->t('Show root DOI field'),
      '#type' => 'checkbox',
      '#default_value' => $this->getSetting('showRoot')
    ];

    $form['showParent'] = [
      '#title' => $this->t('Show parent DOI field '),
      '#type' => 'checkbox',
      '#default_value' => $this->getSetting('showParent')
    ];

    return $form;
  }

}
