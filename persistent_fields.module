<?php


use Drupal\Core\Form;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\path_alias\Entity\PathAlias;

/**
 * @file
 * Primary module hooks for Persistent Identifiers Field Module module.
 */

/**
 * Implements hook_form_alter().
 */
//function persistent_fields_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//  if (isset($form['persistent_minter_checkbox']) && $form['persistent_minter_checkbox']['#value']) {
////    $form['workflow']['upload_' . $form['type']['#value']] = [
////      '#type' => 'radios',
////      '#title' => t('Attachments'),
////      '#default_value' => in_array($form['type']['#value'], $upload_enabled_types) ? 1 : 0,
////      '#options' => [t('Disabled'), t('Enabled')],
////    ];
//    // Add a custom submit handler to save the array of types back to the config file.
//    $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';
//  }
//}

const DOI_RESOURCE_TYPE = [
  'Book' => 'Book',
  'BookChapter' => 'BookChapter',
  'Collection' => 'Collection',
  'ComputationalNotebook' => 'ComputationalNotebook',
  'ConferencePaper' => 'ConferencePaper',
  'ConferenceProceeding' => 'ConferenceProceeding',
  'DataPaper' => 'DataPaper',
  'Dataset' => 'Dataset',
  'Dissertation' => 'Dissertation',
  'Event' => 'Event',
  'Image' => 'Image',
  'InteractiveResource' => 'InteractiveResource',
  'Journal' => 'Journal',
  'JournalArticle' => 'JournalArticle',
  'Model' => 'Model',
  'OutputManagementPlan' => 'OutputManagementPlan',
  'PeerReview' => 'PeerReview',
  'PhysicalObject' => 'PhysicalObject',
  'Preprint' => 'Preprint',
  'Report' => 'Report',
  'Service' => 'Service',
  'Software' => 'Software',
  'Sound' => 'Sound',
  'Standard' => 'Standard',
  'Text' => 'Text',
  'Workflow' => 'Workflow',
  'Other' => 'Other'
];


/**
 * Implements hook_form_alter().
 */
function persistent_fields_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  if (get_class($form_state->getFormObject()) == 'Drupal\node\NodeForm') {
    $entity = $form_state->getFormObject()->getEntity();
    foreach ($entity->getFields() as $fieldname => $field) {
      if ($field->getFieldDefinition()->getType() == "persistent_fields_ark_field") {
//        $form["#attributes"]["id"] = "abcdefgh";
//
//        $form['actions']['persistent_fields_finalize'] = [
//          '#type' => 'button',
//          "#value" => "Finalize",
//          '#ajax' => [
//            'callback' => "persistent_fields_ajax_doi_finalize",
//            'wrapper' => $form["#attributes"]["id"]
//          ],
//        ];

        $form['actions']['submit']['#submit'][] = 'persistent_fields_ajax_submit';

        break;
      }
    }
  }


}

/**
 * Implements hook_field_widget_form_alter().
 *
 * TODO Provision
 * Mint the root only if it's undefined.
 * Mint the pid always
 * Don't touch parent
 *
 * TODO Finalize
 * Save additional data (eg: Authors, DOI title, url)
 */
function persistent_fields_field_widget_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context)
{
  persistent_fields_mint($element, $form_state, $context);
  persistent_fields_fetch($element, $form_state, $context);
}

function persistent_fields_mint(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context)
{

  // Add a css class to widget form elements for all fields of type my_type.
  $field_definition = $context['items']->getFieldDefinition();
  $entity = $form_state->getFormObject()->getEntity();
  $triggering = $form_state->getTriggeringElement();
  $pid = NULL;
  $host = \Drupal::request()->getSchemeAndHttpHost();

//  \Drupal::logger('persistent_fields')->debug("persistent_fields_field_widget_form_alter : " . json_encode($triggering));

  if (
    isset($element['persistent_item'])
    && is_array($triggering)
    && array_key_exists("#parents", $triggering)
    && in_array("persistent_minter_checkbox", $triggering['#parents'])
    && in_array($context['items']->getName(), $triggering['#parents'])
  ) {
    $value = $form_state->getValue($triggering['#parents']);

    if (isset($element['persistent_item']["#value"])) {
      $pid = $element['persistent_item']["#value"];
    } else {
      $pid = $element['persistent_item']["#default_value"];
    }

    if ($field_definition->getType() == 'persistent_fields_ark_field') {
      if ($value) {
        $pid = \Drupal::service('ezid.minter.ezid')->mint($entity);

        $element['persistent_item']["#value"] = $pid;
        // $element['persistent_item_parent']["#value"] = \Drupal::service('ezid.minter.ezid')->mint($entity);
        $element['persistent_item_root']["#value"] = \Drupal::service('ezid.minter.ezid')->mint($entity);

        $element['persistent_item']["#attributes"]["disabled"] = TRUE;
        $element['persistent_item_parent']["#attributes"]["disabled"] = TRUE;
        $element['persistent_item_root']["#attributes"]["disabled"] = TRUE;

//        $pid_response = \Drupal::service('ezid.minter.ezid')->save($pid, [
//          "_target" => "http://example.com/$pid"
//        ]);
//      }
//
//      if (!is_null($pid)) {
//        $pid_response = \Drupal::service('ezid.minter.ezid')->fetch($pid);

        $element['doi_datacite_target'] = array(
          '#title' => 'Target',
          '#type' => 'textfield',
          '#default_value' => "$host/persistent_fields/ark/$pid",
          '#attributes' => [
            "disabled" => True
          ]
        );
      }
    } else if ($field_definition->getType() == 'persistent_fields_doi_field') {
      if ($value) {
        $pid = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
        $pidRoot = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
        // $pidParent = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();

        $element['persistent_item']["#value"] = $pid;
        // $element['persistent_item_parent']["#value"] = $pidParent;
        $element['persistent_item_root']["#value"] = $pidRoot;

        $element['persistent_item']["#attributes"]["disabled"] = TRUE;
        $element['persistent_item_parent']["#attributes"]["disabled"] = TRUE;
        $element['persistent_item_root']["#attributes"]["disabled"] = TRUE;

//        $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->save($pid, [
//          "doi_datacite_title" => "Example DOI",
//          "doi_datacite_url" => "http://abcd.example.com/" . $pid,
//          "doi_datacite_creator" => "Nancy Lu",
//          "doi_datacite_publisher" => "ABCD Publisher",
//          "doi_datacite_publication_year" => "2022",
//          "doi_datacite_resource_type" => "Book"
//        ]);
//      }
//
//      if (!is_null($pid)) {
//        $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->fetch($pid);

        $element['doi_datacite_title'] = array(
          '#title' => 'Title',
          '#type' => 'textfield',
          '#default_value' => "Example DOI",
//          '#attributes' => [
//            "disabled" => !$value
//          ]
        );
        $element['doi_datacite_url'] = array(
          '#title' => 'URL',
          '#type' => 'textfield',
          '#default_value' => "$host/persistent_fields/doi/$pid",
          '#attributes' => [
            "disabled" => True
          ]
        );
        $element['doi_datacite_creator'] = array(
          '#title' => 'Creator',
          '#type' => 'textfield',
          '#default_value' => "Nancy Lu",
//          '#attributes' => [
//            "disabled" => !$value
//          ]
        );
        $element['doi_datacite_publisher'] = array(
          '#title' => 'Publisher',
          '#type' => 'textfield',
          '#default_value' => "ABCD Publisher",
//          '#attributes' => [
//            "disabled" => !$value
//          ]
        );
        $element['doi_datacite_publication_year'] = array(
          '#title' => 'Publication year',
          '#type' => 'textfield',
          '#default_value' => "2022",
//          '#attributes' => [
//            "disabled" => !$value
//          ]
        );
        $element['doi_datacite_resource_type'] = [
          '#type' => 'select',
          '#default_value' => "Book",
          '#title' => 'Resource type',
          '#options' => DOI_RESOURCE_TYPE,
//          '#attributes' => [
//            "disabled" => !$value
//          ]
        ];
//      $element['actions'] = [
//        '#type' => 'actions',
//      ];
//      $element['actions']['submit'] = [
//        '#type' => 'submit',
//        "#value" => "Save",
//        '#ajax' => [
//          'callback' => "persistent_fields_ajax_doi_save"
//        ],
//      ];


        // TODO
        // https://github.com/scotteuser/open_citations/blob/main/open_citations.module
        // https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21form.api.php/function/hook_form_alter/9.4.x
        // $form['actions']['submit']['#submit'][] = 'persistent_fields_ajax_submit';
      }

    } else if ($field_definition->getType() == 'persistent_fields_uuid_field') {
      if ($value) {
        $pid = \Drupal::service('persistent_identifiers.minter.uuid')->mint($entity);
        $element['persistent_item']["#value"] = $pid;
        $element['persistent_item']["#attributes"]["disabled"] = TRUE;
      }
    } else if ($field_definition->getType() == 'persistent_fields_sample_field') {
      if ($value) {
        $pid = \Drupal::service('sample_minter.minter.sample')->mint($entity);
        $element['persistent_item']["#value"] = $pid;
        $element['persistent_item']["#attributes"]["disabled"] = TRUE;
      }
    }
  }
}


function persistent_fields_finalize(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context)
{
  // Add a css class to widget form elements for all fields of type my_type.
  $field_definition = $context['items']->getFieldDefinition();
  $entity = $form_state->getFormObject()->getEntity();
  $triggering = $form_state->getTriggeringElement();


  if (
    isset($element['persistent_item'])
    && is_array($triggering)
    && array_key_exists("#parents", $triggering)
    && in_array("persistent_fields_finalize", $triggering['#parents'])
//    && in_array($context['items']->getName(), $triggering['#parents'])
  ) {

    if (isset($element['persistent_item']["#value"])) {
      $pid = $element['persistent_item']["#value"];
    } else {
      $pid = $element['persistent_item']["#default_value"];
    }

//    $value = $form_state->getValue($triggering['#parents']);
    \Drupal::logger('persistent_fields')->debug("persistent_fields_finalize : " . json_encode($triggering));

    \Drupal::logger('persistent_fields')->debug("persistent_fields_finalize : pid - $pid");
    \Drupal::logger('persistent_fields')->debug("persistent_fields_finalize : element - " . json_encode($element));

    if ($field_definition->getType() == 'persistent_fields_doi_field') {
      if (True || !($element['doi_datacite_title']["#attributes"]["disabled"] ?? True)) {
//        $pid = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//        $pidRoot = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//        $pidParent = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//
//        $element['persistent_item']["#value"] = $pid;
//        $element['persistent_item_parent']["#value"] = $pidParent;
//        $element['persistent_item_root']["#value"] = $pidRoot;
//
//        $element['persistent_item']["#attributes"]["disabled"] = TRUE;
//        $element['persistent_item_parent']["#attributes"]["disabled"] = TRUE;
//        $element['persistent_item_root']["#attributes"]["disabled"] = TRUE;

        \Drupal::logger('persistent_fields')->debug("persistent_fields_finalize : " . json_encode($element['persistent_item']));

        $pid_response = [
          "doi_datacite_title" => $element['doi_datacite_title']["#value"] ?? "Example DOI",
          "doi_datacite_url" => $element['doi_datacite_url']["#value"] ?? "http://example.com",
          "doi_datacite_creator" => $element['doi_datacite_creator']["#value"] ?? "Nancy Lu",
          "doi_datacite_publisher" => $element['doi_datacite_publisher']["#value"] ?? "ABCD Publisher",
          "doi_datacite_publication_year" => $element['doi_datacite_publication_year']["#value"] ?? "2022",
          "doi_datacite_resource_type" => $element['doi_datacite_resource_type']["#value"] ?? "Book"
        ];

        $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->save($pid, $pid_response);

//        $element['doi_datacite_title']["#attributes"]["disabled"] = True;
//        $element['doi_datacite_url']["#attributes"]["disabled"] = True;
//        $element['doi_datacite_creator']["#attributes"]["disabled"] = True;
//        $element['doi_datacite_publisher']["#attributes"]["disabled"] = True;
//        $element['doi_datacite_publication_year']["#attributes"]["disabled"] = True;
//        $element['doi_datacite_resource_type']["#attributes"]["disabled"] = True;


        if (!is_null($pid)) {
          $element['doi_datacite_title'] = array(
            '#title' => 'Title',
            '#type' => 'textfield',
            '#value' => $pid_response["doi_datacite_title"],
            '#attributes' => [
              "disabled" => TRUE
            ]
          );
          $element['doi_datacite_url'] = array(
            '#title' => 'URL',
            '#type' => 'textfield',
            '#value' => $pid_response["doi_datacite_url"],
            '#attributes' => [
              "disabled" => TRUE
            ]
          );
          $element['doi_datacite_creator'] = array(
            '#title' => 'Creator',
            '#type' => 'textfield',
            '#value' => $pid_response["doi_datacite_creator"],
            '#attributes' => [
              "disabled" => TRUE
            ]
          );
          $element['doi_datacite_publisher'] = array(
            '#title' => 'Publisher',
            '#type' => 'textfield',
            '#value' => $pid_response["doi_datacite_publisher"],
            '#attributes' => [
              "disabled" => TRUE
            ]
          );
          $element['doi_datacite_publication_year'] = array(
            '#title' => 'Publication year',
            '#type' => 'textfield',
            '#value' => $pid_response["doi_datacite_publication_year"],
            '#attributes' => [
              "disabled" => TRUE
            ]
          );
          $element['doi_datacite_resource_type'] = [
            '#title' => 'Type',
            '#type' => 'select',
            '#value' => $pid_response["doi_datacite_resource_type"],
            '#title' => 'Resource type',
            '#options' => DOI_RESOURCE_TYPE,
            '#attributes' => [
              "disabled" => TRUE
            ]
          ];
//      $element['actions'] = [
//        '#type' => 'actions',
//      ];
//      $element['actions']['submit'] = [
//        '#type' => 'submit',
//        "#value" => "Save",
//        '#ajax' => [
//          'callback' => "persistent_fields_ajax_doi_save"
//        ],
//      ];
//
//
//        // TODO
//        // https://github.com/scotteuser/open_citations/blob/main/open_citations.module
//        // https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Form%21form.api.php/function/hook_form_alter/9.4.x
//        // $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';
        }
      }


    } else if ($field_definition->getType() == 'persistent_fields_uuid_field') {

    } else if ($field_definition->getType() == 'persistent_fields_sample_field') {

    }
  }
}


function persistent_fields_fetch(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context)
{

  // Add a css class to widget form elements for all fields of type my_type.
  $field_definition = $context['items']->getFieldDefinition();
//  $entity = $form_state->getFormObject()->getEntity();
//  $triggering = $form_state->getTriggeringElement();


  if (
    isset($element['persistent_item'])
//    is_array($triggering)
//    && array_key_exists("#parents", $triggering)
//    && in_array("persistent_minter_checkbox", $triggering['#parents'])
//    && in_array($context['items']->getName(), $triggering['#parents'])
  ) {

    if (isset($element['persistent_item']["#value"])) {
      $pid = $element['persistent_item']["#value"];
    } else {
      $pid = $element['persistent_item']["#default_value"];
    }

    \Drupal::logger('persistent_fields')->debug("persistent_fields_fetch : pid - $pid");

    if ($field_definition->getType() == 'persistent_fields_ark_field') {
      if (!is_null($pid)) {
        $pid_response = \Drupal::service('ezid.minter.ezid')->fetch($pid);

        if (is_null($pid_response["_target"])) {
          $pid_response["_target"] = "http://abcd.example.com/" . $pid;
        }

        if (isset($element['doi_datacite_target'])) {
          $element['doi_datacite_target']["#value"] = $pid_response["_target"];
        }
      }
    } else if ($field_definition->getType() == 'persistent_fields_doi_field') {
      if (!is_null($pid)) {
        $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->fetch($pid);

        \Drupal::logger('persistent_fields')->debug("persistent_fields_fetch : pid_response - " . json_encode($pid_response));

//        if (is_null($pid_response["doi_datacite_title"])) {
//          $pid_response["doi_datacite_title"] = "Example DOI";
//        }
//        if (is_null($pid_response["doi_datacite_url"])) {
//          $pid_response["doi_datacite_url"] = "Example DOI";
//        }
//        if (is_null($pid_response["doi_datacite_creator"])) {
//          $pid_response["doi_datacite_creator"] = "Nancy Lu";
//        }
//        if (is_null($pid_response["doi_datacite_publisher"])) {
//          $pid_response["doi_datacite_publisher"] = "ABCD Publisher";
//        }
//        if (is_null($pid_response["doi_datacite_publication_year"])) {
//          $pid_response["doi_datacite_publication_year"] = "2022";
//        }
//        if (is_null($pid_response["doi_datacite_resource_type"])) {
//          $pid_response["doi_datacite_resource_type"] = "Book";
//        }

//        if (isset($element['doi_datacite_title'])) {
//          $element['doi_datacite_title']["#value"] = $pid_response["doi_datacite_title"];
//          $element['doi_datacite_url']["#value"] = $pid_response["doi_datacite_url"];
//          $element['doi_datacite_creator']["#value"] = $pid_response["doi_datacite_creator"];
//          $element['doi_datacite_publisher']["#value"] = $pid_response["doi_datacite_publisher"];
//          $element['doi_datacite_publication_year']["#value"] = $pid_response["doi_datacite_publication_year"];
//          $element['doi_datacite_resource_type']["#value"] = $pid_response["doi_datacite_resource_type"];
//        }

        if (!is_null($pid_response["doi_datacite_title"])) {
          if (isset($element['doi_datacite_title'])) {
            $element["doi_datacite_title"]["#value"] = $pid_response["doi_datacite_title"];
          } else {
            $element['doi_datacite_title'] = array(
              '#title' => 'Title',
              '#type' => 'textfield',
              '#value' => $pid_response["doi_datacite_title"],
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }

        if (!is_null($pid_response["doi_datacite_url"])) {
          if (isset($element['doi_datacite_url'])) {
            $element["doi_datacite_url"]["#value"] = $pid_response["doi_datacite_url"];
          } else {
            $element['doi_datacite_url'] = array(
              '#title' => 'Url',
              '#type' => 'textfield',
              '#value' => $pid_response["doi_datacite_url"],
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }

        if (!is_null($pid_response["doi_datacite_creator"])) {
          if (isset($element['doi_datacite_creator'])) {
            $element["doi_datacite_creator"]["#value"] = $pid_response["doi_datacite_creator"];
          } else {
            $element['doi_datacite_creator'] = array(
              '#title' => 'Creator',
              '#type' => 'textfield',
              '#value' => $pid_response["doi_datacite_creator"],
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }

        if (!is_null($pid_response["doi_datacite_publisher"])) {
          if (isset($element['doi_datacite_publisher'])) {
            $element["doi_datacite_publisher"]["#value"] = $pid_response["doi_datacite_publisher"];
          } else {
            $element['doi_datacite_publisher'] = array(
              '#title' => 'Publisher',
              '#type' => 'textfield',
              '#value' => $pid_response["doi_datacite_publisher"],
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }

        if (!is_null($pid_response["doi_datacite_publication_year"])) {
          if (isset($element['doi_datacite_publication_year'])) {
            $element["doi_datacite_publication_year"]["#value"] = $pid_response["doi_datacite_publication_year"];
          } else {
            $element['doi_datacite_publication_year'] = array(
              '#title' => 'Publication Year',
              '#type' => 'textfield',
              '#value' => $pid_response["doi_datacite_publication_year"],
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }

        if (!is_null($pid_response["doi_datacite_resource_type"])) {
          if (isset($element['doi_datacite_resource_type'])) {
            $element["doi_datacite_resource_type"]["#value"] = $pid_response["doi_datacite_resource_type"];
          } else {
            $element['doi_datacite_resource_type'] = array(
              '#title' => 'Resource type',
              '#type' => 'select',
              '#value' => $pid_response["doi_datacite_resource_type"],
              '#options' => DOI_RESOURCE_TYPE,
              '#attributes' => [
                "disabled" => TRUE
              ]
            );
          }
        }
      }
    } else if ($field_definition->getType() == 'persistent_fields_uuid_field') {

    } else if ($field_definition->getType() == 'persistent_fields_sample_field') {

    }
  }
}


function persistent_fields_ajax_doi_mint(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];
  $triggering_element_no = $triggering['#parents'][1];
//  $value = $form_state->getValue($triggering['#parents']);
//
//  \Drupal::logger('persistent_fields')->debug("persistent_fields_ajax_doi_mint : " . $field_name);
//
//  $element = $form[$field_name]['widget'];
//
//  if ($value) {
//    $pid = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//    $pidRoot = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//    $pidParent = \Drupal::service('doi_datacite.minter.datacitedois')->mintDraft();
//
//    $form[$field_name]['widget']['persistent_item']["#value"] = $pid;
//    $form[$field_name]['widget']['persistent_item_parent']["#value"] = $pidParent;
//    $form[$field_name]['widget']['persistent_item_root']["#value"] = $pidRoot;
//
//    $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->save($pid, [
//      "doi_datacite_title" => "Example DOI",
//      "doi_datacite_url" => "http://abcd.example.com/" . $pid,
//      "doi_datacite_creator" => "Nancy Lu",
//      "doi_datacite_publisher" => "ABCD Publisher",
//      "doi_datacite_publication_year" => "2022",
//      "doi_datacite_resource_type" => "Book"
//    ]);
//  }

  return $form[$field_name]['widget'];
}

function persistent_fields_ajax_submit(array &$form, FormStateInterface $form_state)
{
  \Drupal::logger('persistent_fields')->debug("persistent_fields_ajax_submit : " . json_encode($form_state->getValues()));


  if (get_class($form_state->getFormObject()) == 'Drupal\node\NodeForm') {
    $entity = $form_state->getFormObject()->getEntity();
    foreach ($entity->getFields() as $fieldname => $field) {
      if ($field->getFieldDefinition()->getType() == "persistent_fields_ark_field") {
        $pid = $form[$fieldname]["widget"][0]["persistent_item"]["#value"];

        if (!is_null($pid) && isset($element['doi_datacite_title']) && !$element['doi_datacite_title']["#attributes"]["disabled"]) {
          $node = $form_state->getFormObject()->getEntity();
          $path_alias = PathAlias::create([
            'path' => '/node/' . $node->id(),
            'alias' => '/persistent_fields/ark/' . $pid,
          ]);
          $path_alias->save();
        }
      } else if ($field->getFieldDefinition()->getType() == "persistent_fields_doi_field") {
        $element = $form[$fieldname]["widget"][0];
        $pid = $element["persistent_item"]["#value"];

        \Drupal::logger('persistent_fields')->debug("persistent_fields_ajax_submit DOI pid : $pid");

        if (!is_null($pid) && isset($element['doi_datacite_title']) && !$element['doi_datacite_title']["#attributes"]["disabled"]) {
          $node = $form_state->getFormObject()->getEntity();
          $path_alias = PathAlias::create([
            'path' => '/node/' . $node->id(),
            'alias' => '/persistent_fields/doi/' . $pid,
          ]);
          $path_alias->save();

          $pid_response = [
            "doi_datacite_title" => $element['doi_datacite_title']["#value"] ?? "Example DOI",
            "doi_datacite_url" => $element['doi_datacite_url']["#value"] ?? "http://example.com",
            "doi_datacite_creator" => $element['doi_datacite_creator']["#value"] ?? "Nancy Lu",
            "doi_datacite_publisher" => $element['doi_datacite_publisher']["#value"] ?? "ABCD Publisher",
            "doi_datacite_publication_year" => $element['doi_datacite_publication_year']["#value"] ?? "2022",
            "doi_datacite_resource_type" => $element['doi_datacite_resource_type']["#value"] ?? "Book"
          ];

          $pid_response = \Drupal::service('doi_datacite.minter.datacitedois')->save($pid, $pid_response);
        }
      }
    }
  }


  return $form;
}

function persistent_fields_ajax_doi_save(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];
  $triggering_element_no = $triggering['#parents'][1];

  return $form[$field_name]['widget'][$triggering_element_no];
}

function persistent_fields_ajax_doi_fetch(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];
  $triggering_element_no = $triggering['#parents'][1];

  return $form[$field_name]['widget'][$triggering_element_no];
}

function persistent_fields_ajax_sample_mint(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];
  $triggering_element_no = $triggering['#parents'][1];

  return $form[$field_name]['widget'][$triggering_element_no];
}

function persistent_fields_ajax_uuid_mint(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];
  $triggering_element_no = $triggering['#parents'][1];

  return $form[$field_name]['widget'][$triggering_element_no];
}

function persistent_fields_ajax_ark_mint(array &$form, FormStateInterface $form_state)
{
  $triggering = $form_state->getTriggeringElement();
  $field_name = $triggering['#array_parents'][0];

  return $form[$field_name]['widget'];
}

/**
 * Implements hook_help().
 */
function persistent_fields_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match)
{
  $help_content = '<div>
      <h3>About</h3>
      <p>The persistent fields module provides most of the functionality needed for assigning different types of
      persistent identifiers to publications, citations and applications content types that will be used for
      One Science Place. It provides a building block for use in those content types and possibly others.</p>
  </div>';

  switch ($route_name) {
    case 'persistent_fields.admin_display':
    case 'help.page.persistent_fields':
      return $help_content;
  }
}
